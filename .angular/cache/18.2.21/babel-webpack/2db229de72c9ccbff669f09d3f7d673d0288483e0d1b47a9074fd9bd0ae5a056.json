{"ast":null,"code":"import { patchState, signalStore, withState, withMethods } from '@ngrx/signals';\n;\nexport const IntialState = {\n  initialCenter: [4.30332, 52.07271],\n  initialZoom: 13,\n  sent: false,\n  zoomFly: 4\n};\nexport const SentStore = signalStore({\n  providedIn: 'root'\n}, withState(IntialState), withMethods(store => ({\n  setSent(value) {\n    patchState(store, {\n      sent: value\n    });\n  }\n})));\n// in the contact-form component on success will call this: this.store.setSent(true); \n// in the map component we will use an effect. \n// import { effect, inject } from '@angular/core';\n// import { SentStore } from '../store/sent.store';\n// @Component({\n//   selector: 'app-mapbox',\n//   templateUrl: './mapbox.component.html',\n// })\n// export class MapboxComponent {\n//   private store = inject(SentStore);\n//   constructor() {\n//     // ðŸ‘‡ this runs every time the signal value changes\n//     effect(() => {\n//       const shouldZoom = this.store.sent(); // access the signal value\n//       if (shouldZoom) {\n//         this.zoomOutMap();\n//       }\n//     });\n//   }\n//   private zoomOutMap() {\n//     this.zoom.set(4);\n//     this.map.setZoom(this.zoom());\n//   }\n// }","map":{"version":3,"names":["patchState","signalStore","withState","withMethods","IntialState","initialCenter","initialZoom","sent","zoomFly","SentStore","providedIn","store","setSent","value"],"sources":["/Users/sagishutrit/Desktop/datepicker/mapbox-angular/src/app/store/contact.store.ts"],"sourcesContent":["import { patchState, signalStore, withState, withMethods } from '@ngrx/signals';\n;\n\n\nexport interface contactFromMap {\n  zoomFly:number; \n  initialCenter:[number, number];\n  initialZoom:number;\n  sent:boolean;\n\n}\nexport const IntialState:contactFromMap  = {\n  initialCenter: [4.30332, 52.07271],\n  initialZoom:13,\n  sent:false, \n  zoomFly:4\n}\nexport const SentStore = signalStore(\n  { providedIn: 'root' },\n  withState(IntialState),\n  withMethods((store) => ({\n    setSent(value: boolean) {\n      patchState(store, { sent: value });\n    },\n  }))\n);\n\n\n\n// in the contact-form component on success will call this: this.store.setSent(true); \n// in the map component we will use an effect. \n// import { effect, inject } from '@angular/core';\n// import { SentStore } from '../store/sent.store';\n\n// @Component({\n//   selector: 'app-mapbox',\n//   templateUrl: './mapbox.component.html',\n// })\n// export class MapboxComponent {\n//   private store = inject(SentStore);\n\n//   constructor() {\n//     // ðŸ‘‡ this runs every time the signal value changes\n//     effect(() => {\n//       const shouldZoom = this.store.sent(); // access the signal value\n//       if (shouldZoom) {\n//         this.zoomOutMap();\n//       }\n//     });\n//   }\n\n//   private zoomOutMap() {\n//     this.zoom.set(4);\n//     this.map.setZoom(this.zoom());\n//   }\n// }\n"],"mappings":"AAAA,SAASA,UAAU,EAAEC,WAAW,EAAEC,SAAS,EAAEC,WAAW,QAAQ,eAAe;AAC/E;AAUA,OAAO,MAAMC,WAAW,GAAmB;EACzCC,aAAa,EAAE,CAAC,OAAO,EAAE,QAAQ,CAAC;EAClCC,WAAW,EAAC,EAAE;EACdC,IAAI,EAAC,KAAK;EACVC,OAAO,EAAC;CACT;AACD,OAAO,MAAMC,SAAS,GAAGR,WAAW,CAClC;EAAES,UAAU,EAAE;AAAM,CAAE,EACtBR,SAAS,CAACE,WAAW,CAAC,EACtBD,WAAW,CAAEQ,KAAK,KAAM;EACtBC,OAAOA,CAACC,KAAc;IACpBb,UAAU,CAACW,KAAK,EAAE;MAAEJ,IAAI,EAAEM;IAAK,CAAE,CAAC;EACpC;CACD,CAAC,CAAC,CACJ;AAID;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}